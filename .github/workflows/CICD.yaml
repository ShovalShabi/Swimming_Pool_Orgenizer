name: CI/CD for Node.js Backend Server Application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "21"

      # Step 3: Create .env.test file
      - name: Create .env.test for CI/CD
        run: |
          echo "MONGO_PORT=27017" >> backend/.env.test
          echo "DB_NAME=ShiftTest" >> backend/.env.test
          echo `mongodb://${HOST_TYPE}:${MONGO_PORT}/${DB_NAME}` >> backend/.env.test
          echo "PORT=0" >> backend/.env.test
          echo "ERROR_LOGGING=error" >> backend/.env.test
          echo "WARN_LOGGING=warn" >> backend/.env.test
          echo "INFO_LOGGING=info" >> backend/.env.test
          echo "VERBOUSE_LOGGING=verbose" >> backend/.env.test
          echo "DEBUG_LOGGING=debug" >> backend/.env.test
          echo "SILLY_LOGGING=silly" >> backend/.env.test

      # Step 4: Validate .env.test creation
      - name: Validate .env.test creation
        run: |
          if [ ! -f backend/.env.test ]; then
            echo ".env.test file not found!" && exit 1
          fi

      # Step 5: Install dependencies
      - name: Install dependencies
        run: |
          npm install
        working-directory: ./backend

      # Step 6: Run tests
      - name: Run tests
        run: |
          npm run test
        working-directory: ./backend
        env:
          - NODE_ENV: test
          - PORT: 0
          - DB_NAME: ShiftTest

      # Step 7: Build the application
      - name: Build application
        run: |
          npm run build
        working-directory: ./backend

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Login to Docker Hub (optional, if pushing images)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERUSERNAME }}
          password: ${{ secrets.DOCKERPASSWORD }}

      # Step 4: Build and start Docker Compose services
      - name: Build and start Docker Compose services
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          docker-compose -f backend/docker-compose.yml up --build -d

      # Step 5: Tear down Docker Compose
      - name: Tear Down Docker Compose
        if: always()
        run: |
          docker-compose -f backend/docker-compose.yml down

      # Step 6: Output logs
      - name: Output logs for all services
        run: |
          echo "Service logs:"
          docker-compose logs

      # Step 7: Upload log file
      - name: Upload log file
        uses: actions/upload-artifact@v3
        with:
          name: deployment-logs
          path: ./backend/logs
